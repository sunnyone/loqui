requires 2.0.0

%alltop{
/*
 * libloqui -- Chat/IM client library for GLib <http://launchpad.net/loqui/>
 * Copyright (C) 2004 Yoichi Imai <sunnyone41@gmail.com>
 *
 * This Library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This Library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with the Gnome Library; see the file COPYING.LIB.  If not,
 * write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */
%}

%h{
#include <libloqui/loqui-message-text.h>
#include <libloqui/loqui-general-pref-groups.h>
%}

%{
#include "libloqui-intl.h"
#include "loqui-utils.h"

#include "loqui-core.h"
#include "loqui.h"

#define HIGHLIGHT_WORD_RE_PREIX "re:"
#define HIGHLIGHT_WORD_PLAIN_PREFIX "plain:"
%}

class Loqui:Notifier from G:Object
{
	public Loqui:Notifier *
	new(void) {
		LoquiNotifier *ret;

		ret = GET_NEW;
		return ret;
	}

	/* caution: 'notify' signal is used by GObject. */
	signal last NONE (OBJECT)
	void
	notify_highlight(self, LoquiMessageText *msgtext);

	signal last NONE (OBJECT)
	void
	notify_uri(self, LoquiMessageText *msgtext);

	public virtual void
	process_message_text(self, LoquiMessageText *msgtext) {
		if (loqui_message_text_get_is_remark(msgtext) &&
		    self_search_highlight_regions(self, msgtext))
			self_notify_highlight(self, msgtext);

		if (self_search_uri_regions(self, msgtext))
			self_notify_uri(self, msgtext);
	}

	private void
	search_highlight_word_regexp(self, LoquiMessageText *msgtext, gchar *regexp_str) {
		GRegex *regex;
		GMatchInfo *match_info;
		GError *error;
		const gchar *text;
		gssize string_len;
		gint start_pos, end_pos;
		LoquiMessageTextRegion *region;

		error = NULL;
		if ((regex = g_regex_new(regexp_str, 0, 0, &error)) == NULL) {
			g_warning("Regex compile error: %s", error->message);
			g_error_free(error);
			return;
		}

		text = loqui_message_text_get_text(msgtext);
		string_len = strlen(text);

		g_regex_match(regex, text, 0, &match_info);
		while (g_match_info_matches(match_info)) {
			g_match_info_fetch_pos(match_info, 0, &start_pos, &end_pos);
			region = loqui_message_text_region_create(msgtext, start_pos, end_pos);
			msgtext->highlight_region_list = g_list_append(msgtext->highlight_region_list, region);
			g_match_info_next(match_info, NULL);
		}
		
		g_match_info_free(match_info);
		g_regex_unref(regex);
	}

	public gboolean
	search_highlight_regions(self, LoquiMessageText *msgtext) {
		const gchar *remark;
		LoquiMessageTextRegion *region;
		gchar **highlight_array;
		gboolean matched;
		gchar *word, *raw;
		gsize len;
		const gchar *tmp, *cur;
		int i;

		matched = FALSE;
		remark = loqui_message_text_get_text(msgtext);
		highlight_array = loqui_pref_get_string_list(loqui_get_general_pref(),
							     LOQUI_GENERAL_PREF_GROUP_NOTIFICATION, "HighlightList", NULL, NULL);

		if (highlight_array == NULL)
			return FALSE;

		for (i = 0; (raw = highlight_array[i]) != NULL; i++) {
			if (g_str_has_prefix(raw, HIGHLIGHT_WORD_RE_PREIX)) {
				self_search_highlight_word_regexp(self, msgtext, raw + strlen(HIGHLIGHT_WORD_RE_PREIX));
				continue;
			}

			if (g_str_has_prefix(raw, HIGHLIGHT_WORD_PLAIN_PREFIX)) {
				word = raw + strlen(HIGHLIGHT_WORD_PLAIN_PREFIX);
			} else {
				word = raw;
			}

			len = strlen(word);

			for (cur = remark; (tmp = strstr(cur, word)) != NULL; cur = tmp + len) {
				region = loqui_message_text_region_create_from_offset(msgtext, tmp - remark, len);
				msgtext->highlight_region_list = g_list_append(msgtext->highlight_region_list, region);

				matched = TRUE;
			}
		}
		g_strfreev(highlight_array);

		return matched;
	}

	
	public gboolean
	search_uri_regions(self, LoquiMessageText *msgtext) {
		const gchar *text;
		const gchar *cur;
		const gchar *start_uri, *end_uri;
		LoquiMessageTextRegion *region;
		gboolean matched = FALSE;

		text = loqui_message_text_get_text(msgtext);
		cur = text;

		while (*cur && loqui_utils_search_uri(cur, NULL, &start_uri, &end_uri)) {
			region = loqui_message_text_region_create(msgtext, start_uri - text, end_uri - text);
			msgtext->uri_region_list = g_list_append(msgtext->uri_region_list, region);

			matched = TRUE;
			cur = end_uri;
		}

		return matched;
	}
}
