requires 2.0.0

%alltop{
/*
 * libloqui -- Chat/IM client library for GLib <http://loqui.good-day.net/>
 * Copyright (C) 2004 Yoichi Imai <yoichi@silver-forest.com>
 *
 * This Library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This Library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with the Gnome Library; see the file COPYING.LIB.  If not,
 * write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */
%}

%h{
#include "loqui_account.h"
#include "ipmsg_packet.h"
#include "loqui-socket-ipmsg.h"
#include "loqui_user_ipmsg.h"
%}

%{
#include <libloqui-intl.h>
#include "utils.h"

#include "loqui-sender-ipmsg.h"
#include "loqui-receiver-ipmsg.h"

#include "loqui-utils-ipmsg.h"
#include "ipmsg_packet.h"
#include "ipmsg.h"
%}

class Loqui:Account:IPMsg from Loqui:Account
{
	private LoquiSocketIPMsg *sock;
	private gint current_packet_num = { (gint) time(NULL) };

	override (G:Object) GObject *
	constructor(GType type, guint n_props, GObjectConstructParam *props) {
		GObject *object;

		LoquiAccount *account;
		LoquiUser *user;

		object = PARENT_HANDLER(type, n_props, props);

		account = LOQUI_ACCOUNT(object);

		loqui_account_set_sender(account, LOQUI_SENDER(loqui_sender_ipmsg_new(account)));
		loqui_account_set_receiver(account, LOQUI_RECEIVER(loqui_receiver_ipmsg_new(account)));

		user = LOQUI_USER(loqui_user_ipmsg_new());
		loqui_user_set_away(user, LOQUI_AWAY_TYPE_OFFLINE);
		loqui_account_set_user_self(account, user);

		return object;
	}
	override (Loqui:Account) void connect(Loqui:Account *account) {
		Self *self;
		LoquiUser *user_self;
		gchar *str;
		
		self = SELF(account);

		if (loqui_account_get_is_connected(LOQUI_ACCOUNT(self))) {
			loqui_account_warning(LOQUI_ACCOUNT(self), _("Already connected."));
			return;
		}

		selfp->sock = loqui_socket_ipmsg_new(account);

		if (!loqui_socket_ipmsg_bind(selfp->sock)) {
			loqui_account_warning(LOQUI_ACCOUNT(self), _("Failed to create socket. Is used the port?"));
			G_OBJECT_UNREF_UNLESS_NULL(selfp->sock);
			return;
		}
	
		loqui_account_set_is_connected(LOQUI_ACCOUNT(self), TRUE);

		str = g_strdup_printf(_("Opened the socket."));
		loqui_account_append_text(LOQUI_ACCOUNT(self), NULL, LOQUI_TEXT_TYPE_INFO, str);
		g_free(str);

		user_self = loqui_account_get_user_self(LOQUI_ACCOUNT(self));
		loqui_user_set_away(user_self, LOQUI_AWAY_TYPE_ONLINE);
		loqui_user_set_nick(user_self, loqui_profile_account_get_nick(loqui_account_get_profile(LOQUI_ACCOUNT(self))));
		loqui_user_set_hostname(user_self,
					gnet_inetaddr_get_host_name());

		/* FIXME: can't get ?
		   tmp = loqui_socket_ipmsg_get_current_ip_addr(selfp->sock);
		   loqui_user_ipmsg_set_ip_addr(LOQUI_USER_IPMSG(user_self), tmp);
		   g_free(tmp); */

		loqui_user_ipmsg_set_ip_addr(LOQUI_USER_IPMSG(user_self), "127.0.0.1");
		loqui_user_ipmsg_set_port(LOQUI_USER_IPMSG(user_self), loqui_socket_ipmsg_get_current_port(selfp->sock));
		/* FIXME: originally this should do in UserIPMsg */
		g_object_notify(G_OBJECT(user_self), "identifier");

		loqui_sender_ipmsg_br_entry(LOQUI_SENDER_IPMSG(LOQUI_ACCOUNT(self)->sender));
	}

	override (Loqui:Account) void disconnect(Loqui:Account *account) {
		Self *self;

		self = SELF(account);

		if (!loqui_account_get_is_connected(LOQUI_ACCOUNT(account)))
			return;
		
		loqui_sender_ipmsg_br_exit(LOQUI_SENDER_IPMSG(LOQUI_ACCOUNT(self)->sender));

		if (selfp->sock)
			loqui_socket_ipmsg_unbind(selfp->sock);
		G_OBJECT_UNREF_UNLESS_NULL(selfp->sock);

		loqui_account_append_text(account, NULL, LOQUI_TEXT_TYPE_INFO, _("Disconnected."));

		loqui_account_set_is_connected(LOQUI_ACCOUNT(account), FALSE);
		loqui_user_set_away(loqui_account_get_user_self(LOQUI_ACCOUNT(account)), LOQUI_AWAY_TYPE_OFFLINE);
	}

	public LoquiAccountIPMsg *
	new(LoquiProfileAccount *profile) {
		Self *self = g_object_new(TYPE_SELF, "profile", profile, NULL);

		return self;
	}
	
	public LoquiSocketIPMsg *get_socket(self) {
		return selfp->sock;
	}

	public IPMsgPacket *create_packet(self, gint command_num, const gchar *extra) {
		LoquiUser *user;
		LoquiProfileAccount *profile;

		user = loqui_account_get_user_self(LOQUI_ACCOUNT(self));
		profile = loqui_account_get_profile(LOQUI_ACCOUNT(self));

		return ipmsg_packet_create(IPMSG_VERSION,
					   selfp->current_packet_num++,
					   loqui_profile_account_get_username(profile),
					   loqui_user_get_hostname(user),
					   command_num,
					   extra,
					   loqui_user_ipmsg_get_group_name(LOQUI_USER_IPMSG(user)));
	}

	public LoquiUserIPMsg *fetch_user_by_pair(self, const gchar *ip_addr, gint port) {
		gchar *identifier;
		LoquiUser *user;

		identifier = loqui_utils_ipmsg_create_identifier(ip_addr, port);
		if ((user = loqui_account_peek_user(LOQUI_ACCOUNT(self), identifier)) == NULL) {
			user = LOQUI_USER(loqui_user_ipmsg_new());

			loqui_user_ipmsg_set_ip_addr(LOQUI_USER_IPMSG(user), ip_addr);
			loqui_user_ipmsg_set_port(LOQUI_USER_IPMSG(user), port);

			loqui_account_add_user(LOQUI_ACCOUNT(self), user);
		} else {
			g_object_ref(user);
		}
		g_free(identifier);

		return LOQUI_USER_IPMSG(user);
	}
}
