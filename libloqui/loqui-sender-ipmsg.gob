requires 2.0.0

%alltop{
/*
 * libloqui -- Chat/IM client library for GLib <http://loqui.good-day.net/>
 * Copyright (C) 2004 Yoichi Imai <yoichi@silver-forest.com>
 *
 * This Library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This Library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with the Gnome Library; see the file COPYING.LIB.  If not,
 * write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */
%}

%h{
#include "loqui_sender.h"
#include "loqui_account.h"

#include <gnet.h>
%}

%{
#include <libloqui-intl.h>
#include "loqui-utils.h"

#include "loqui-socket-ipmsg.h"
#include "ipmsg_packet.h"
#include "loqui-account-ipmsg.h"
#include "ipmsg.h"

#include "loqui-message-text.h"
%}

%{
/* account: Loqui:Account */
#define SELF_GET_ACCOUNT(sender) (LOQUI_SENDER(sender)->account)

#define SELF_GET_ACCOUNT_IPMSG(sender) (LOQUI_ACCOUNT_IPMSG(SELF_GET_ACCOUNT(self)))

#define MAX_RETRY_SENDMSG_COUNT 5
#define SENDMSG_RETRY_INTERVAL 1000 /* ms */
%}

class Loqui:Sender:IPMsg from Loqui:Sender
{
	public GList *retring_sendmsg_list = NULL unref {
		g_list_foreach(retring_sendmsg_list, (GFunc) g_object_unref, NULL);
		g_list_free(retring_sendmsg_list);
	};

	override (Loqui:Sender)
	void nick(Loqui:Sender *sender, const gchar *text) {
		Self *self = SELF(sender);

		loqui_user_set_nick(loqui_account_get_user_self(SELF_GET_ACCOUNT(self)), text);
		self_br_absence(self);
	}
	override (Loqui:Sender)
	void away(Loqui:Sender *sender, LoquiAwayType away_type, const gchar *away_message) {
		Self *self = SELF(sender);

		loqui_user_set_away(loqui_account_get_user_self(SELF_GET_ACCOUNT(self)), away_type);
		self_br_absence(self);
	}
	override (Loqui:Sender)
	void say(Loqui:Sender *sender, LoquiChannel *channel, const gchar *text) {
		LoquiMember *member;
		LoquiUser *user_self;
		Self *self = SELF(sender);
		gint num, i;

		user_self = loqui_account_get_user_self(SELF_GET_ACCOUNT(self));
		num = loqui_channel_entry_get_member_number(LOQUI_CHANNEL_ENTRY(channel));
		for (i = 0; i < num; i++) {
			member = loqui_channel_entry_get_nth_member(LOQUI_CHANNEL_ENTRY(channel), i);
			if (num == 1 || member->user != user_self)
			self_send_sendmsg(self, member->user, text);
		}

		
		loqui_channel_append_remark(channel,
					    LOQUI_TEXT_TYPE_NORMAL,
					    TRUE, 
					    loqui_user_get_nick(user_self),
					    text,
					    FALSE, TRUE);
	}

	override (Loqui:Sender)
	void start_private_talk(Loqui:Sender *sender, Loqui:User *user) {
		gchar *identifier;

		identifier = loqui_user_get_identifier(user);
		loqui_account_open_private_talk(loqui_sender_get_account(sender), identifier, user);
		g_free(identifier);
	}

	/* helper */
	private void send_packet_to_default(self, :IPMsg:Packet *packet) {
		LoquiAccount *account;
		LoquiSocketIPMsg *socket;

		account = SELF_GET_ACCOUNT(self);

		if (!loqui_account_get_is_connected(account)) {
			loqui_account_warning(account, _("The account is not connected."));
			return;
		}

		socket = loqui_account_ipmsg_get_socket(LOQUI_ACCOUNT_IPMSG(account));
		loqui_socket_ipmsg_send_packet_to_default(socket, packet);
	}
	private void send_packet(self, :IPMsg:Packet *packet, const gchar *ip_addr, gint port) {
		LoquiAccount *account;
		LoquiSocketIPMsg *socket;

		account = SELF_GET_ACCOUNT(self);

		if (!loqui_account_get_is_connected(account)) {
			loqui_account_warning(account, _("The account is not connected."));
			return;
		}
		
		socket = loqui_account_ipmsg_get_socket(LOQUI_ACCOUNT_IPMSG(account));
		loqui_socket_ipmsg_send_packet(socket, packet, ip_addr, port);
	}

	private void send_packet_with_inetaddr(self, :IPMsg:Packet *packet, GInetAddr *inetaddr) {
		LoquiAccount *account;
		LoquiSocketIPMsg *socket;

		account = SELF_GET_ACCOUNT(self);

		if (!loqui_account_get_is_connected(account)) {
			loqui_account_warning(account, _("The account is not connected."));
			return;
		}
		
		socket = loqui_account_ipmsg_get_socket(LOQUI_ACCOUNT_IPMSG(account));
		loqui_socket_ipmsg_send_packet_with_inetaddr(socket, packet, inetaddr);
	}

	public void nooperation(self) {
		IPMsgPacket *packet;

		packet = loqui_account_ipmsg_create_packet(SELF_GET_ACCOUNT_IPMSG(self), IPMSG_NOOPERATION, NULL);
		self_send_packet_to_default(self, packet);
		g_object_unref(packet);
	}

	private gint helper_get_away_opt(LoquiUser *user) {
		LoquiAwayType away_type = loqui_user_get_away(user);

		if (away_type == LOQUI_AWAY_TYPE_ONLINE)
			return 0;

		return IPMSG_ABSENCEOPT;
	}

	private void helper_send_br_command(self, gint command_num) {
		IPMsgPacket *packet;
		LoquiUser *user_self;
		const gchar *nick;

		loqui_sender_ipmsg_nooperation(self);
		
		user_self = loqui_account_get_user_self(SELF_GET_ACCOUNT(self));
		nick = loqui_user_get_nick(user_self);
		command_num |= self_helper_get_away_opt(user_self);

		packet = loqui_account_ipmsg_create_packet(SELF_GET_ACCOUNT_IPMSG(self),
							   command_num,
							   nick);
		self_send_packet_to_default(self, packet);
		g_object_unref(packet);
	}

	private gboolean sendmsg_timeout_cb(IPMsgPacket *packet) {
		Self *self = g_object_get_data(G_OBJECT(packet), "sender-ipmsg");
		const gchar *ip_addr;
		gint port, retry_count;
		GList *cur;

		if ((cur = g_list_find(self->retring_sendmsg_list, packet)) != NULL) {
			ip_addr = g_object_get_data(G_OBJECT(packet), "dest-ip-addr");
			port = GPOINTER_TO_INT(g_object_get_data(G_OBJECT(packet), "dest-port"));
			retry_count = GPOINTER_TO_INT(g_object_get_data(G_OBJECT(packet), "retry-count"));

			if (retry_count >= MAX_RETRY_SENDMSG_COUNT) {
				self->retring_sendmsg_list = g_list_delete_link(self->retring_sendmsg_list, cur);
				g_object_unref(packet);
				return FALSE;
			}
			self_send_packet(self, packet, ip_addr, port);
			g_object_set_data(G_OBJECT(packet), "retry-count", GINT_TO_POINTER(retry_count + 1));

			return TRUE;
		}

		g_object_unref(packet);
		return FALSE;
	}

	public void br_entry(self) {
		self_helper_send_br_command(self, IPMSG_BR_ENTRY);
	}
	public void br_absence(self) {
		self_helper_send_br_command(self, IPMSG_BR_ABSENCE);
	}
	public void ansentry(self) {
		self_helper_send_br_command(self, IPMSG_ANSENTRY);
	}
	public void br_exit(self) {
		self_helper_send_br_command(self, IPMSG_BR_EXIT);
	}
	
	public void send_sendmsg(self, LoquiUser *user, const gchar *text) {
		IPMsgPacket *packet;
		const gchar *ip_addr;
		gint port;

		packet = loqui_account_ipmsg_create_packet(SELF_GET_ACCOUNT_IPMSG(self),
							   IPMSG_SENDMSG | IPMSG_SENDCHECKOPT,
							   text);
		
		self->retring_sendmsg_list = g_list_prepend(self->retring_sendmsg_list, packet);

		ip_addr = loqui_user_ipmsg_get_ip_addr(LOQUI_USER_IPMSG(user));
		port = loqui_user_ipmsg_get_port(LOQUI_USER_IPMSG(user));

		self_send_packet(self, packet, ip_addr, port);

		g_object_set_data(G_OBJECT(packet), "sender-ipmsg", self);
		g_object_set_data_full(G_OBJECT(packet), "dest-ip-addr", g_strdup(ip_addr), (GDestroyNotify) g_free);
		g_object_set_data(G_OBJECT(packet), "dest-port", GINT_TO_POINTER(port));
		g_object_set_data(G_OBJECT(packet), "retry-count", GINT_TO_POINTER(1));

		g_timeout_add(SENDMSG_RETRY_INTERVAL, (GSourceFunc) self_sendmsg_timeout_cb, packet);
	}

	public void send_recvmsg(self, gint orig_packet_num, GInetAddr *dest_inetaddr) {
		IPMsgPacket *packet;
		gchar *tmp;
		
		tmp = g_strdup_printf("%d", orig_packet_num);
		packet = loqui_account_ipmsg_create_packet(SELF_GET_ACCOUNT_IPMSG(self),
							   IPMSG_RECVMSG,
							   tmp);
		g_free(tmp);
		
		self_send_packet_with_inetaddr(self, packet, dest_inetaddr);
	}

	public LoquiSenderIPMsg *
	new(Loqui:Account *account) {
		Self *self;

		self = GET_NEW;
		LOQUI_SENDER(self)->account = account;
		
		return self;
	}
}
