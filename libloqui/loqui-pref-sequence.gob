requires 2.0.0

%alltop{
/*
 * libloqui -- Chat/IM client library for GLib
 * Copyright (C) 2004 Yoichi Imai <sunnyone41@gmail.com>
 *
 * This Library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This Library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with the Gnome Library; see the file COPYING.LIB.  If not,
 * write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */
%}

%{
#include <libloqui-intl.h>
#include "loqui-utils.h"
%}

%h{
#include <libloqui/loqui-pref-partial.h>
%}

class Loqui:Pref:Sequence from G:Object
{
	public Loqui:Pref *pref
	  unref {
		self_set_pref(self, NULL);
	  };
	public gchar *prefix;


	property OBJECT pref (nick = _("Pref"), blurb = _("Pref Object"), default_value = NULL)
		get { g_value_set_object(VAL, self_get_pref(self)); }
	        set { self_set_pref(self, g_value_get_object(VAL)); };

	public void
	set_pref(self, LoquiPref *pref) {
		LOQUI_G_OBJECT_UNREF_UNLESS_NULL(self->pref);

		if (pref) {
			self->pref = g_object_ref(pref);
		}
	}

	public LoquiPref *
	get_pref(self) {
		return self->pref;
	}

	public void
	set_prefix(self, const gchar *prefix) {
		LOQUI_G_FREE_UNLESS_NULL(self->prefix);

		self->prefix = g_strdup(prefix);
	}

	public const gchar *
	get_prefix(self) {
		return self->prefix;
	}
	
	public gchar *
	create_group_name(self, gint id) {
		g_return_val_if_fail(self->prefix != NULL, NULL);

		return g_strdup_printf("%s%d", self->prefix, id);
	}

	public gboolean
	has_id(self, gint id) {
		gchar *group_name;
		gboolean has_id;

		g_return_val_if_fail(self->prefix != NULL, FALSE);
		g_return_val_if_fail(self->pref != NULL, FALSE);

		group_name = self_create_group_name(self, id);
		has_id = loqui_pref_has_group(self->pref, group_name);

		g_free(group_name);

		return has_id;
	}

	/**
	 * get_new_id:
	 * 
	 * Returns: id (0 if error)
	 */
	public gint
	get_new_id(self) {
		gint id;
		gint i;

		g_return_val_if_fail(self->prefix != NULL, 0);
		g_return_val_if_fail(self->pref != NULL, 0);

		id = loqui_pref_get_integer(self->pref, "Sequence", self->prefix, NULL);
		if (id <= 0)
			id = 0;

		for (i = 0; i < INT_MAX; i++) {
			if (i == INT_MAX)
				i = 1;
			else
				i++;
		
			if (!self_has_id(self, id)) {
				loqui_pref_set_integer(self->pref, "Sequence", self->prefix, id);
				return id;
			}
		}
		return 0;
	}

	public GList *
	get_id_list(self) {
		gchar **array;
		int i;
		GList *list = NULL;
		gchar *id_str;
		gint id;

		g_return_val_if_fail(self->prefix != NULL, NULL);
		g_return_val_if_fail(self->pref != NULL, NULL);

		array = loqui_pref_get_groups(self->pref, NULL);
		for (i = 0; array[i] != NULL; i++) {
			if (!g_str_has_prefix(array[i], self->prefix))
				continue;
			id_str = array[i] + strlen(self->prefix);

			id = g_ascii_strtoull(id_str, NULL, 10);
			if (id <= 0)
				continue;
			
			list = g_list_prepend(list, GINT_TO_POINTER(id));
		}
		g_strfreev(array);

		return g_list_reverse(list);
	}
	public LoquiPrefPartial *
	get_pref_partial(self, gint id) {
		gchar *group_name;
		LoquiPrefPartial *ppref;

		if (!self_has_id(self, id))
			return NULL;

		group_name = self_create_group_name(self, id);
		ppref = loqui_pref_partial_new();
		
		loqui_pref_partial_set_group_name(ppref, group_name);
		g_free(group_name);
		
		loqui_pref_partial_set_pref(ppref, self->pref);
		loqui_pref_partial_set_id(ppref, id);

		return ppref;
	}

	public LoquiPrefSequence *
	new(void) {
		Self *self = GET_NEW;
		return self;
	}

}
