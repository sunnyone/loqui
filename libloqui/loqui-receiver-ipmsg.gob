requires 2.0.0

%alltop{
/*
 * libloqui -- Chat/IM client library for GLib <http://loqui.good-day.net/>
 * Copyright (C) 2004 Yoichi Imai <yoichi@silver-forest.com>
 *
 * This Library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This Library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with the Gnome Library; see the file COPYING.LIB.  If not,
 * write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */
%}

%h{
#include <loqui_receiver.h>
#include "loqui_account.h"
#include "ipmsg_packet.h"
%}

%{
#include <libloqui-intl.h>
#include "utils.h"

#include "loqui_user_ipmsg.h"
#include "ipmsg.h"
#include "loqui-account-ipmsg.h"
#include "loqui-sender-ipmsg.h"
%}

%{
/* account: Loqui:Account */
#define SELF_GET_ACCOUNT(receiver) (LOQUI_RECEIVER(receiver)->account)
#define SELF_GET_SENDER_IPMSG(receiver) (LOQUI_SENDER_IPMSG(SELF_GET_ACCOUNT(receiver)->sender))
%}

class Loqui:Receiver:IPMsg from Loqui:Receiver
{
	private gboolean validate_and_warn_packet(self, IPMsgPacket *packet) {
		gchar *identifier;
		LoquiAccount *account;

		account = LOQUI_RECEIVER(self)->account;

		identifier = ipmsg_packet_get_identifier(packet);
		if (!identifier) {
			loqui_account_warning(account, _("Invalid IP address or port"));
			return FALSE;
		}
		if (!packet->username) {
			loqui_account_warning(account, _("Username is not set"));
			g_free(identifier);
			return FALSE;
		}
		if (!packet->hostname) {
			loqui_account_warning(account, _("Hostname is not set"));
			g_free(identifier);
			return FALSE;
		}

		g_free(identifier);
		return TRUE;
	}

	private void helper_update_user(self, LoquiUser *user, gboolean print_changes,
					const gchar *nick, gboolean is_away,
					const gchar *username, const gchar *hostname, const gchar *group_name) {
		LoquiAccount *account = SELF_GET_ACCOUNT(self);
		const gchar *tmp;
		gboolean old_is_away;

#define STR_DIFFERENT(ptr1, ptr2) (ptr1 != ptr2 && (ptr1 == NULL || ptr2 == NULL || strcmp(ptr1, ptr2) != 0))

		tmp = loqui_user_get_nick(user);
		if (STR_DIFFERENT(tmp, nick)) {
			if (print_changes)
				loqui_account_append_text_printf(account, NULL, LOQUI_TEXT_TYPE_INFO,
								 "*** %s is known as %s",
								 LOQUI_UTILS_EMPTY_IF_NULL(tmp),
								 LOQUI_UTILS_EMPTY_IF_NULL(nick));
			loqui_user_set_nick(user, nick);
		}

		old_is_away = (loqui_user_get_away(user) != LOQUI_AWAY_TYPE_ONLINE) ? TRUE : FALSE;
		if (old_is_away != is_away) {
			if (print_changes) {
				loqui_account_append_text_printf(account, NULL, LOQUI_TEXT_TYPE_INFO,
								 is_away ?
								  "*** %s has been marked as being away" : 
								  "*** %s is no longer marked as being away",
								 LOQUI_UTILS_EMPTY_IF_NULL(nick));
			}
			loqui_user_set_away(user, is_away ? LOQUI_AWAY_TYPE_AWAY : LOQUI_AWAY_TYPE_ONLINE);
		}
		    
		tmp = loqui_user_get_username(user);
		if (STR_DIFFERENT(tmp, username)) {
			if (print_changes)
				loqui_account_append_text_printf(account, NULL, LOQUI_TEXT_TYPE_INFO,
								 "*** %s's username has changed from %s to %s",
								 LOQUI_UTILS_EMPTY_IF_NULL(nick),
								 LOQUI_UTILS_EMPTY_IF_NULL(tmp),
								 LOQUI_UTILS_EMPTY_IF_NULL(username));
			loqui_user_set_username(user, username);
		}
		
		tmp = loqui_user_get_hostname(user);
		if (STR_DIFFERENT(tmp, hostname)) {
			if (print_changes)
				loqui_account_append_text_printf(account, NULL, LOQUI_TEXT_TYPE_INFO,
								 "*** %s's hostname has changed from %s to %s",
								 LOQUI_UTILS_EMPTY_IF_NULL(nick),
								 LOQUI_UTILS_EMPTY_IF_NULL(tmp),
								 LOQUI_UTILS_EMPTY_IF_NULL(hostname));
			loqui_user_set_hostname(user, hostname);
		}

		
		tmp = loqui_user_ipmsg_get_group_name(LOQUI_USER_IPMSG(user));
		if (STR_DIFFERENT(tmp, group_name)) {
			if (print_changes)
				loqui_account_append_text_printf(account, NULL, LOQUI_TEXT_TYPE_INFO,
								 "*** %s's group name has changed from %s to %s",
								 LOQUI_UTILS_EMPTY_IF_NULL(nick),
								 LOQUI_UTILS_EMPTY_IF_NULL(tmp),
								 LOQUI_UTILS_EMPTY_IF_NULL(group_name));
			loqui_user_ipmsg_set_group_name(LOQUI_USER_IPMSG(user), group_name);
		}
	}

	private gboolean helper_br_command(self, :IPMsg:Packet *packet, gboolean print_changes) {
		LoquiAccount *account;
		LoquiUser *user;
		LoquiMember *member;
		gchar *ip_addr;
		gint port;
		gboolean is_add;

		account = SELF_GET_ACCOUNT(self);

		ip_addr = ipmsg_packet_get_ip_addr(packet);
		port = ipmsg_packet_get_port(packet);
		user = LOQUI_USER(loqui_account_ipmsg_fetch_user_by_pair(LOQUI_ACCOUNT_IPMSG(account), ip_addr, port));

		member = loqui_channel_entry_get_member_by_user(LOQUI_CHANNEL_ENTRY(account), user);
		is_add = (member == NULL) ? TRUE : FALSE;

		self_helper_update_user(self, user,
					print_changes && !is_add,
					packet->extra,
					packet->command_num & IPMSG_ABSENCEOPT ? TRUE : FALSE,
					packet->username, packet->hostname, packet->group_name);

		if (is_add) {
			member = loqui_member_new(user);
			loqui_channel_entry_add_member(LOQUI_CHANNEL_ENTRY(account), member);
			g_object_unref(member);
		}

		/* account has reference count */
		g_object_unref(user);

		return is_add;
	}

	private void command_br_entry(self, :IPMsg:Packet *packet) {
		if (!self_validate_and_warn_packet(self, packet))
			return;
		
		if (self_helper_br_command(self, packet, FALSE))
			loqui_account_append_text_printf(SELF_GET_ACCOUNT(self), NULL, LOQUI_TEXT_TYPE_INFO,
							 "*** %s (%s) (%s@%s) has appeared",
							 packet->extra,
							 LOQUI_UTILS_EMPTY_IF_NULL(packet->group_name),
							 packet->username,
							 packet->hostname);

		loqui_sender_ipmsg_ansentry(SELF_GET_SENDER_IPMSG(self));
	}
	
	private void command_ansentry(self, IPMsgPacket *packet) {
		if (!self_validate_and_warn_packet(self, packet))
			return;

		if (self_helper_br_command(self, packet, FALSE))
			loqui_account_append_text_printf(SELF_GET_ACCOUNT(self), NULL, LOQUI_TEXT_TYPE_INFO,
							 "*** %s (%s) (%s@%s) is here",
							 packet->extra,
							 LOQUI_UTILS_EMPTY_IF_NULL(packet->group_name),
							 packet->username,
							 packet->hostname);
	}

	private void command_br_absence(self, IPMsgPacket *packet) {
		if (!self_validate_and_warn_packet(self, packet))
			return;

		if (self_helper_br_command(self, packet, TRUE))
			loqui_account_append_text_printf(SELF_GET_ACCOUNT(self), NULL, LOQUI_TEXT_TYPE_INFO,
							 "*** %s (%s) (%s@%s) has already be here",
							 packet->extra,
							 LOQUI_UTILS_EMPTY_IF_NULL(packet->group_name),
							 packet->username,
							 packet->hostname);
		
	}

	private void command_br_exit(self, :IPMsg:Packet *packet) {
		LoquiAccount *account;
		LoquiUser *user;
		gchar *identifier;

		account = SELF_GET_ACCOUNT(self);

		if (!self_validate_and_warn_packet(self, packet))
			return;

		identifier = ipmsg_packet_get_identifier(packet);

		if ((user = loqui_account_peek_user(account, identifier)) == NULL) {
			/* two BR_EXIT packet come from original IPMsg, so just ignore the packet */
			/* loqui_account_warning(account, _("The user '%s' exit, but he/she is not registered."), identifier); */
			g_free(identifier);
			return;
		}
		g_free(identifier);

		loqui_account_append_text_printf(SELF_GET_ACCOUNT(self), NULL, LOQUI_TEXT_TYPE_INFO,
						 "*** %s (%s) (%s@%s) has quit",
						 loqui_user_get_nick(user),
						 LOQUI_UTILS_EMPTY_IF_NULL(loqui_user_ipmsg_get_group_name(LOQUI_USER_IPMSG(user))),
						 loqui_user_get_username(user),
						 loqui_user_get_hostname(user));
	
		/* TODO: loqui_account_remove_user(user); */
		loqui_channel_entry_remove_member_by_user(LOQUI_CHANNEL_ENTRY(account), user);
	}

	public void handle(self, :IPMsg:Packet *packet (check null type)) {
		gchar *str;

		if (packet->version != 1) {
			loqui_account_warning(SELF_GET_ACCOUNT(self),
					      _("Only supports IPMessenger Protocol Version 1 (the message is version '%d')"), packet->version);
			return;
		}

		switch (IPMSG_GET_MODE(packet->command_num)) {
		case IPMSG_NOOPERATION:
			return;
		case IPMSG_BR_ENTRY:
			self_command_br_entry(self, packet);
			return;
		case IPMSG_BR_EXIT:
			self_command_br_exit(self, packet);
			return;
		case IPMSG_ANSENTRY:
			self_command_ansentry(self, packet);
			return;
		case IPMSG_BR_ABSENCE:
			self_command_br_absence(self, packet);
			return;
		case IPMSG_SENDMSG:
//		loqui_receiver_ipmsg_command_sendmsg(self, packet);
//		return;
		default:
			break;
		}

		str = ipmsg_packet_inspect(packet);
		loqui_account_append_text(SELF_GET_ACCOUNT(self), NULL, LOQUI_TEXT_TYPE_NORMAL, str);
		g_free(str);
	}

	public LoquiReceiverIPMsg *
	new(Loqui:Account *account) {
		Self *self;

		self = GET_NEW;
		LOQUI_RECEIVER(self)->account = account;
		
		return self;
	}
}
