requires 2.0.0

%alltop{
/*
 * libloqui -- Chat/IM client library for GLib <http://launchpad.net/loqui/>
 * Copyright (C) 2004 Yoichi Imai <sunnyone41@gmail.com>
 *
 * This Library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This Library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with the Gnome Library; see the file COPYING.LIB.  If not,
 * write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */
%}

%h{
#include "ipmsg_packet.h"
#include "loqui_account.h"
%}

%{
#include <libloqui-intl.h>
#include "loqui-utils.h"

#include "ipmsg_packet.h"
#include "ipmsg.h"

#include <stdlib.h>
#include <locale.h>
#include "loqui-static-core.h"
#include "loqui-account-ipmsg.h"
#include "loqui-receiver-ipmsg.h"

#include <sys/socket.h>
%}

%{
#define SELF_GET_ACCOUNT(self) (self->account)
#define SELF_GET_ACCOUNT_IPMSG(self) (LOQUI_ACCOUNT_IPMSG(SELF_GET_ACCOUNT(self)))
%}

class Loqui:Socket:IPMsg from G:Object
{
	private GSocket *udpsock unref {
		self_unbind(self);
	};

	private GInetSocketAddress *inetaddr_broadcast unrefwith g_object_unref;

	private LoquiCodeConv *codeconv unrefwith g_object_unref;

	private guint in_watch;
	private guint out_watch;

	public LoquiAccount *account;

	private gboolean 
	watch_in_cb(GIOChannel *ioch, GIOCondition condition, Self *self) {
#define MAXBUF 65536
		gchar buf[MAXBUF+1];
		gsize len;
		IPMsgPacket *packet;
		GSocketAddress *addr;
		gchar *local, *local_group;
		gint len2zero;
		LoquiAccount *account;
		GString *string;
		GError *error = NULL;

		account = SELF_GET_ACCOUNT(self);

		len = g_socket_receive_from(selfp->udpsock, &addr, buf, MAXBUF, NULL, &error);
		if (error != NULL) {
			loqui_account_warning(account, "Error: receiving: %s", error->message);
			selfp->in_watch = 0;
			return FALSE;
		} else if (len == 0) {
			loqui_account_warning(account, "No characters is arrived.");
			return TRUE;
		}
		buf[len] = '\0';

		/* group message exists after '\0' */
		if ((local = loqui_codeconv_to_local(selfp->codeconv, buf, &error)) == NULL) {
			loqui_account_warning(account, _("Failed to convert codeset: %s"), error->message);
			g_error_free(error);
			return TRUE;
		}
		string = g_string_new(local);
		g_free(local);

		len2zero = strlen(buf);
		if (len2zero + 1 < len) {
			if ((local_group = loqui_codeconv_to_local(selfp->codeconv, buf + len2zero + 1, &error)) == NULL) {
				loqui_account_warning(account, _("Failed to convert codeset of group: %s"), error->message);
				g_error_free(error);
				g_string_free(string, TRUE);
				return TRUE;
			}
			g_string_append_c(string, '\0');
			g_string_append(string, local_group);
			g_free(local_group);
		}

		packet = ipmsg_packet_parse(string->str, string->len);
		if (!packet) {
			loqui_account_warning(account, _("Invalid packet: '%s'"), string->str);
			g_string_free(string, TRUE);
			return TRUE;
		}
		g_string_free(string, TRUE);

		ipmsg_packet_set_inetaddr(packet, G_INET_SOCKET_ADDRESS(addr));
		g_object_unref(addr);
		
		if (loqui_core_get_show_msg_mode(loqui_get_core())) {
			gchar *tmp = ipmsg_packet_inspect(packet);
			loqui_account_print_communication(SELF_GET_ACCOUNT(self), TRUE, tmp);
			g_free(tmp);
		}

		loqui_receiver_ipmsg_handle(LOQUI_RECEIVER_IPMSG(SELF_GET_ACCOUNT(self)->receiver), packet);
		g_object_unref(packet);

		return TRUE;
	}

	public gboolean bind(self) {
		GIOChannel *ioch;
                GError *error = NULL;
                GInetAddress *any_addr, *broadcast_addr;
                GSocketAddress *bind_addrport;
                int sockfd, on_flag = 1;
                
		selfp->udpsock = g_socket_new(G_SOCKET_FAMILY_IPV4,
		                              G_SOCKET_TYPE_DATAGRAM,
		                              G_SOCKET_PROTOCOL_UDP,
		                              NULL); /* TODO: error handling */
		                              
                any_addr = g_inet_address_new_any(G_SOCKET_FAMILY_IPV4);
                bind_addrport = g_inet_socket_address_new(any_addr, IPMSG_DEFAULT_PORT);
                g_object_unref(any_addr);
                
		g_socket_bind(selfp->udpsock,
		              bind_addrport,
		              TRUE,
		              &error);
		g_object_unref(bind_addrport);

                /* FIXME: no methods available for SO_BROADCAST in gio... */
                sockfd = g_socket_get_fd(selfp->udpsock);
                if (setsockopt(sockfd, SOL_SOCKET, SO_BROADCAST, (void*) &on_flag, sizeof(on_flag)) != 0) {
		        loqui_account_warning(SELF_GET_ACCOUNT(self), _("Failed to set SO_BROADCAST"));
		}
                
		if (error != NULL) {
		        g_object_unref(selfp->udpsock);
		        selfp->udpsock = NULL;
		        
		        g_error_free(error);
		        
		        return FALSE;
		}
		
		ioch = g_io_channel_unix_new(g_socket_get_fd(selfp->udpsock));
		selfp->in_watch = g_io_add_watch(ioch, G_IO_IN | G_IO_ERR | G_IO_HUP | G_IO_NVAL,
						(GIOFunc) self_watch_in_cb, self);

                broadcast_addr = g_inet_address_new_from_string("255.255.255.255");
		selfp->inetaddr_broadcast = G_INET_SOCKET_ADDRESS(g_inet_socket_address_new(broadcast_addr, IPMSG_DEFAULT_PORT));
                g_object_unref(broadcast_addr);
                
		return TRUE;
	}

	public void unbind(self) {
		if (!selfp->udpsock)
			return;

		if (selfp->in_watch) {
			g_source_remove(selfp->in_watch);
			selfp->in_watch = 0;
		}

                g_socket_shutdown(selfp->udpsock, TRUE, TRUE, NULL); /* TODO: error handling */
		selfp->udpsock = NULL;
	}
	public void send_packet_with_inetaddr(self, IPMsgPacket *packet, GInetSocketAddress *inetaddr) {
	        gchar *body_local = NULL, *group_local = NULL, *body_serv = NULL, *group_serv = NULL;
		GError *error = NULL;
                GString *string;
                
		if (!selfp->udpsock)
			return;

                ipmsg_packet_to_string(packet, &body_local, &group_local);
                
		if ((body_serv = loqui_codeconv_to_server(selfp->codeconv, body_local, &error)) == NULL) {
			loqui_account_warning(SELF_GET_ACCOUNT(self), "Failed to convert codeset(%s): %s.", error->message, body_local);
			g_error_free(error);
			g_free(body_local);
			g_free(group_local);
			return;
		}
		
		if (group_local != NULL &&
		    ((group_serv = loqui_codeconv_to_server(selfp->codeconv, group_local, &error)) == NULL)) {
			loqui_account_warning(SELF_GET_ACCOUNT(self), "Failed to convert codeset(%s): %s.", error->message, group_local);
			g_error_free(error);
			g_free(body_local);
			g_free(group_local);
			g_free(body_serv);
			return;
		}
		
		string = g_string_new(body_serv);
		if (group_serv != NULL) {
	        	g_string_append_c(string, '\0');
		        g_string_append(string, group_serv);
		}
		g_free(body_serv);
                g_free(group_serv);
		
                g_socket_send_to(selfp->udpsock,
                                 G_SOCKET_ADDRESS(inetaddr),
                                 string->str, string->len, NULL, &error);
                /* TODO: cancellable, error handling*/
                if (error != NULL) {
			loqui_account_warning(SELF_GET_ACCOUNT(self), "Can't send text: %s", error->message);
                        g_error_free(error);
                        return;
                }
                g_string_free(string, TRUE);
                
		if (loqui_core_get_show_msg_mode(loqui_get_core())) {
			gchar *tmp = ipmsg_packet_inspect(packet);
			loqui_account_print_communication(SELF_GET_ACCOUNT(self), FALSE, tmp);
			g_free(tmp);
		}
	}

	public void send_packet(self, IPMsgPacket *packet, const gchar *ip_addr, gint port) {
		GInetSocketAddress *inet_sock_addr;
                GInetAddress *inet_addr;
                
                inet_addr = g_inet_address_new_from_string(ip_addr);
		inet_sock_addr = G_INET_SOCKET_ADDRESS(g_inet_socket_address_new(inet_addr, port));
		g_object_unref(inet_addr);
		
		self_send_packet_with_inetaddr(self, packet, inet_sock_addr);
                g_object_unref(inet_sock_addr);
	}

	public void send_packet_to_default(self, IPMsgPacket *packet) {
		g_return_if_fail(selfp->inetaddr_broadcast);

		self_send_packet_with_inetaddr(self, packet, selfp->inetaddr_broadcast);
	}

	public gint get_current_port(self) {
		if (!selfp->udpsock)
			return 0;

                /* TODO: error handling */
		return g_inet_socket_address_get_port(G_INET_SOCKET_ADDRESS(g_socket_get_local_address(selfp->udpsock, NULL)));
	}

	public LoquiSocketIPMsg *
	new(LoquiAccount *account) {
		Self *self;

		self = GET_NEW;
		self->account = account;

		selfp->codeconv = loqui_codeconv_new();
		loqui_codeconv_set_table(selfp->codeconv, loqui_protocol_get_codeconv_table(loqui_account_get_profile(account)->protocol));
		loqui_codeconv_set_mode(selfp->codeconv, LOQUI_CODECONV_MODE_AUTOMATIC);
		g_assert(loqui_codeconv_update(selfp->codeconv, NULL));

		return self;
	}
}
