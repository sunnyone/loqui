requires 2.0.0

%alltop{
/*
 * libloqui -- Chat/IM client library for GLib <http://loqui.good-day.net/>
 * Copyright (C) 2004 Yoichi Imai <yoichi@silver-forest.com>
 *
 * This Library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This Library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with the Gnome Library; see the file COPYING.LIB.  If not,
 * write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */
%}

%h{
#include <libloqui/loqui-transfer-item.h>
#include <gnet.h>

%}

%{
#include <libloqui/libloqui-intl.h>
#include "loqui-utils.h"
%}

class Loqui:Transfer:Item:IRC from Loqui:Transfer:Item
{
	public GInetAddr *inet_addr = NULL unrefwith gnet_inetaddr_unref;
	private GConn *conn = NULL unrefwith gnet_conn_unref;
	private GIOChannel *ioch = NULL unrefwith g_io_channel_unref;
	private gint bytes_written;

	property POINTER inet_addr (
		nick = _("Addr"),
		blurb = _("Address"))
		get { g_value_set_pointer(VAL, self_get_inet_addr(self)); }
	        set { self_set_inet_addr(self, g_value_get_pointer(VAL)); };
	
	public Loqui:Transfer:Item:IRC *
	new(void) {
		Self *self;

		self = GET_NEW;

		return self;
	}

	override (Loqui:Transfer:Item)
	void
	start (Loqui:Transfer:Item *item_p) {
		Self *self;

		self = SELF(item_p);

		if (!loqui_transfer_item_get_is_upload(item_p)) {
			if (selfp->conn) {
				loqui_transfer_item_warning(LOQUI_TRANSFER_ITEM(self), _("Already started."));
				return;
			}

			if (self_get_inet_addr(self) == NULL) {
				loqui_transfer_item_warning(LOQUI_TRANSFER_ITEM(self), _("InetAddr is not set."));
				return;
			}

			if (!item_p->dirname) {
				loqui_transfer_item_warning(LOQUI_TRANSFER_ITEM(self), _("Directory name is not set."));
				return;
			}

			if (!item_p->filename) {
				loqui_transfer_item_warning(LOQUI_TRANSFER_ITEM(self), _("Filename is not set."));
				return;
			}

			selfp->conn = gnet_conn_new_inetaddr(self_get_inet_addr(self), self_download_conn_cb, self);
			gnet_conn_connect(selfp->conn);
		} else {
			loqui_transfer_item_warning(LOQUI_TRANSFER_ITEM(self), _("Uploading is not supported."));
			return;
		}
	}

	override (Loqui:Transfer:Item)
	void
	cancel (Loqui:Transfer:Item *item_p) {
		Self *item;

		item = SELF(item_p);
		
		
	}
	
	private void
	download_conn_cb(GConn *conn, GConnEvent *event, gpointer user_data) {
		Self *self;
		
		self = SELF(user_data);
		
		switch (event->type) {
		case GNET_CONN_ERROR:
			loqui_transfer_item_warning(LOQUI_TRANSFER_ITEM(self),
						    _("An error occured on the connection"));
			gnet_conn_unref(conn);
			selfp->conn = NULL;

			break;
		case GNET_CONN_CONNECT:
			self_download_conn_connect_cb(self, event);

			break;
		case GNET_CONN_CLOSE:
			loqui_transfer_item_warning(LOQUI_TRANSFER_ITEM(self),
						    _("Connection closed."));
			break;

		case GNET_CONN_TIMEOUT:
			loqui_transfer_item_warning(LOQUI_TRANSFER_ITEM(self),
						    _("Connection timed out."));
			break;
		case GNET_CONN_READ:
			self_download_conn_read_cb(self, event);
			break;
		default:
			g_assert_not_reached();
		}
	}

	private void
	download_conn_connect_cb(self, GConnEvent *event) {
		gchar *path;
		GError *error = NULL;

		loqui_transfer_item_information(LOQUI_TRANSFER_ITEM(self), _("Connected."));
		selfp->bytes_written = 0;

		path = loqui_transfer_item_get_path_local(LOQUI_TRANSFER_ITEM(self));

		if ((selfp->ioch = g_io_channel_new_file(path, "w", &error)) == NULL) {
			loqui_transfer_item_warning(LOQUI_TRANSFER_ITEM(self), _("Failed to open '%s' to save: %s"), path, error->message);
			g_error_free(error);
			g_free(path);
			self_reset(self);
			return;
		}

		g_free(path);

		gnet_conn_read(selfp->conn);
	}
			     
	private void
	download_conn_read_cb(self, GConnEvent *event) {
		gsize bytes_written;
		GError *error = NULL;

		g_assert(selfp->ioch);
		
		if (g_io_channel_write_chars(selfp->ioch, event->buffer, event->length, &bytes_written, &error) != G_IO_STATUS_NORMAL) {
			loqui_transfer_item_warning(LOQUI_TRANSFER_ITEM(self), _("Failed to write: %s"), error->message);
			g_error_free(error);
			self_reset(self);
			return;
		}
		
		selfp->bytes_written += bytes_written;
		if (loqui_transfer_item_get_size(LOQUI_TRANSFER_ITEM(self)) <= selfp->bytes_written) {
			loqui_transfer_item_information(LOQUI_TRANSFER_ITEM(self), _("Completed."));
			if (g_io_channel_shutdown(selfp->ioch, TRUE, &error) != G_IO_STATUS_NORMAL) {
				loqui_transfer_item_warning(LOQUI_TRANSFER_ITEM(self), _("Failed to close."));
				g_error_free(error);
				self_reset(self);
			}
			self_reset(self);
		}
	}

	private void
	reset(self) {
		if (selfp->conn) {
			gnet_conn_delete(selfp->conn);
			selfp->conn = NULL;
		}

		selfp->bytes_written = 0;
	}

	public void
	set_inet_addr(self, GInetAddr *addr) {
		if (self->inet_addr) {
			gnet_inetaddr_unref(addr);
			self->inet_addr = NULL;
		}
		if (addr) {
			self->inet_addr = addr;
			gnet_inetaddr_ref(addr);
		}
	}

	public GInetAddr *
	get_inet_addr(self) {
		return self->inet_addr;
	}

}
