requires 2.0.0

%alltop{
/*
 * Loqui -- Chat/IM client for Gtk2 <http://loqui.good-day.net/>
 * Copyright (C) 2002-2003 Yoichi Imai <yoichi@silver-forest.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */
%}

%h{
#include <gtk/gtk.h>
#include "eggtrayicon.h"
%}


%h{
#ifndef __TYPEDEF_LOQUI_TRAY_ICON__
#define __TYPEDEF_LOQUI_TRAY_ICON__
typedef struct _LoquiTrayIcon LoquiTrayIcon;
#endif

#include "loqui_app.h"
%}

%{
#undef G_LOG_DOMAIN
#include "config.h"
#include <glib/gi18n.h>

#include "loqui-tray-icon.h"
#include "loqui_stock.h"
#include "gtkutils.h"

#define LOQUI_TRAY_ICON_BLINK_COUNT 20
#define LOQUI_TRAY_ICON_BLINK_INTERVAL 750
%}


class Loqui:Tray:Icon from G:Object {
        public GtkWidget *image;
        public gboolean is_hilighted;
        
        public LoquiApp *app;
	public GtkWidget *eggicon;
	public gboolean is_x11;
        private GtkMenu *menu;
        
        private gint blink_count_remains;
        private gboolean blinking;
	private guint destroy_handler_id = 0 unref {
		g_signal_handler_disconnect(self, destroy_handler_id);
	};

        private gboolean
        button_press_event_cb(GtkWidget *widget, GdkEventButton *event, Loqui:Tray:Icon *self (check null type)) onerror FALSE {
        	if (event->type == GDK_BUTTON_PRESS) {
        		switch (event->button) {
        		case 1:
        			if (gtkutils_widget_is_iconified(GTK_WIDGET(self->app)) ||
        			    loqui_app_is_obscured(self->app))
        				gtk_window_present(GTK_WINDOW(self->app));
        			else
        				gtk_window_iconify(GTK_WINDOW(self->app));
        			break;
        		case 3:
        			gtk_menu_popup(GTK_MENU(selfp->menu), NULL, NULL,
        				       gtkutils_menu_position_under_or_below_widget, GTK_WIDGET(widget),
        				       event ? event->button : 0,
        				       event ? event->time : gtk_get_current_event_time());
        			break;
        		default:
        			break;
        		}
        	}
        	return FALSE;
        }

        private void
        set_icon(self, gboolean is_hilighted) {
		if (self->is_x11) {
			if (!self->eggicon) {
				g_warning("The egg icon is not alive.");
				return;
			}

			gtk_image_set_from_stock(GTK_IMAGE(self->image),
						 is_hilighted ? LOQUI_STOCK_LOQUI_HILIGHTED : LOQUI_STOCK_LOQUI,
						 GTK_ICON_SIZE_LARGE_TOOLBAR);
		}
        }

        private gboolean
        blink_for_idle_cb(self) {
        	g_timeout_add(LOQUI_TRAY_ICON_BLINK_INTERVAL, (GSourceFunc) loqui_tray_icon_blink_cb, self);
        
        	return FALSE;
        }

        private gboolean
        blink_cb(self) {
        	if (selfp->blink_count_remains > 0) {
        		self_set_icon(self, (selfp->blink_count_remains % 2 != 0) ? TRUE : FALSE);
        		selfp->blink_count_remains--;
        		return TRUE;
        	} else {
        		self_set_icon(self, self->is_hilighted);
        		selfp->blinking = FALSE;
        		return FALSE;
        	}
        }
	
	private gboolean
	eggicon_recreate_for_idle_cb(self) {
		self_create_eggicon(self);

		return FALSE;
	}

	private void
	eggicon_destroy_cb(GtkWidget *widget, Self *self (check null type))	{
		g_object_unref(self->eggicon);
		self->eggicon = NULL;
		
		g_idle_add((GSourceFunc) self_eggicon_recreate_for_idle_cb, self);
	}

	private void
	create_eggicon(self) {
#ifdef GDK_WINDOWING_X11
        	GtkWidget *event_box;

		self->eggicon = GTK_WIDGET(egg_tray_icon_new("Loqui"));

		selfp->destroy_handler_id = g_signal_connect(G_OBJECT(self->eggicon), "destroy",
							     G_CALLBACK(self_eggicon_destroy_cb), self);

		/* to avoid dieing when the tray died? */
		g_object_ref(self->eggicon);

        	event_box = gtk_event_box_new();
        	gtk_container_add(GTK_CONTAINER(self->eggicon), event_box);
        	
        	g_signal_connect(G_OBJECT(event_box), "button_press_event",
        			 G_CALLBACK(self_button_press_event_cb), self);
        
        	self->image = gtk_image_new_from_stock(LOQUI_STOCK_LOQUI, GTK_ICON_SIZE_LARGE_TOOLBAR);
        	gtk_container_add(GTK_CONTAINER(event_box), self->image);
        
        	self_set_hilighted(self, FALSE);
        	gtk_widget_show_all(GTK_WIDGET(self->eggicon));
#endif
	}

	private void
	use_x11(self) {
		self_create_eggicon(self);
	}

	public Loqui:Tray:Icon *
	new(LoquiApp *app, GtkMenu *menu) {
		Self *self;
		
        	self = GET_NEW;
        	
        	self->app = app;
        	selfp->menu = menu;
#ifdef GDK_WINDOWING_X11
		self_use_x11(self);
		self->is_x11 = TRUE;
#endif

                return self;
        }

        public void
        set_hilighted(self, gboolean is_hilighted) {
        	if (self->is_hilighted == is_hilighted)
        		return;
        
        	self->is_hilighted = is_hilighted;
        	self_set_icon(self, is_hilighted);
        }

        public void
        blink(self) {
        	selfp->blink_count_remains = LOQUI_TRAY_ICON_BLINK_COUNT;

        	if (!selfp->blinking) {
        		selfp->blinking = TRUE;
        		g_idle_add((GSourceFunc) self_blink_for_idle_cb, self);
        	}
        }

	public void
	destroy(self) {
		if (self->is_x11)
			gtk_widget_destroy(GTK_WIDGET(self->eggicon));
	}
}

