requires 2.0.0

%alltop{
/*
 * Loqui -- Chat/IM client for Gtk2 <http://loqui.good-day.net/>
 * Copyright (C) 2002-2003 Yoichi Imai <yoichi@silver-forest.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */
%}

%h{
#include <gtk/gtk.h>

#include <libloqui/loqui_protocol_manager.h>
%}

%{
#include <glib/gi18n.h>

#include <libloqui/loqui-protocol.h>

enum {
	COLUMN_NAME,
	COLUMN_PROTOCOL,
	COLUMN_NUMBER,
};

%}

class Loqui:Protocol:Selection:Dialog from Gtk:Dialog
{
	private LoquiProtocolManager *protocol_manager = NULL unrefwith g_object_unref;
	
	private GtkWidget *combobox;
	private GtkListStore *store; /* FIXME: should be unref'ed ? */

	private void
	add_widgets(self) {
		GtkCellRenderer *renderer;
		GtkWidget *label;
		GtkWidget *vbox;

		vbox = GTK_DIALOG(self)->vbox;

		label = gtk_label_new(_("Choose a protocol."));
		gtk_box_pack_start(GTK_BOX(vbox), label, TRUE, TRUE, 5);

		renderer = gtk_cell_renderer_text_new();
		selfp->combobox = gtk_combo_box_new_with_model(GTK_TREE_MODEL(selfp->store));
		gtk_cell_layout_pack_start(GTK_CELL_LAYOUT(selfp->combobox), renderer, TRUE);
		gtk_cell_layout_set_attributes(GTK_CELL_LAYOUT(selfp->combobox), renderer,
					       "text", COLUMN_NAME,
					       NULL);

		gtk_box_pack_start(GTK_BOX(vbox), selfp->combobox, TRUE, TRUE, 5);

		gtk_widget_show_all(GTK_WIDGET(self));
	}

	private void
	load_protocols(self) {
		GList *list, *cur;
		GtkTreeIter iter;
		LoquiProtocol *protocol;

		list = loqui_protocol_manager_get_protocol_list(selfp->protocol_manager);
		for (cur = list; cur != NULL; cur = cur->next) {
			protocol = LOQUI_PROTOCOL(cur->data);

			gtk_list_store_append(selfp->store, &iter);
			gtk_list_store_set(selfp->store, &iter,
					   COLUMN_NAME, loqui_protocol_get_identifier(protocol),
					   COLUMN_PROTOCOL, protocol,
					   -1);
		}

		g_list_free(list);
	}

        public GtkWidget*
        new(LoquiProtocolManager *protocol_manager) {
		Self *self = GET_NEW;

		selfp->protocol_manager = g_object_ref(protocol_manager);
		
		selfp->store = gtk_list_store_new(COLUMN_NUMBER,
						  G_TYPE_STRING,
						  LOQUI_TYPE_PROTOCOL);

		gtk_window_set_title(GTK_WINDOW(self), _("Protocol Selection"));
		gtk_dialog_add_buttons(GTK_DIALOG(self),
				       GTK_STOCK_OK, GTK_RESPONSE_OK,
				       GTK_STOCK_CANCEL, GTK_STOCK_CANCEL,
				       NULL);

		self_add_widgets(self);
		
		self_load_protocols(self);

		return GTK_WIDGET(self);
	}
}
