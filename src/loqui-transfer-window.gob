requires 2.0.0
%alltop{
/*
 * Loqui -- Chat/IM client for Gtk2 <http://launchpad.net/loqui/>
 * Copyright (C) 2002-2003 Yoichi Imai <sunnyone41@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */
%}

%h{
#include <gtk/gtk.h>
%}

%{
#include "config.h"

#include "loqui-transfer-window.h"
#include "loqui-transfer-window-private.h"
#include <glib/gi18n.h>
#include "embedtxt/loqui_transfer_window_ui.h"

static GtkActionEntry action_entries[] = {
	{"Start", GTK_STOCK_GO_FORWARD, N_("_Start"), NULL, NULL, NULL},
	{"Cancel", GTK_STOCK_CANCEL, N_("Cancel"), NULL, NULL, NULL},
	{"Close", GTK_STOCK_CLOSE, N_("Close"), NULL, NULL, NULL}
};

static GtkToggleActionEntry toggle_action_entries[] = {
        {"ToggleInfo", GTK_STOCK_PROPERTIES, N_("_Information"), NULL, NULL, NULL, FALSE},
};

%}

class Loqui:Transfer:Window from Gtk:Window {
        private GtkWidget *handlebox_toolbar;
        private GtkWidget *toolbar;

	private GtkWidget *toolbutton_start;
	private GtkWidget *toolbutton_stop;
        private GtkWidget *toggletb_info;

        private GtkWidget *treeview;
        private GtkWidget *button_dir;
        private GtkWidget *entry_filename;
        private GtkWidget *entry_directory;
        private GtkWidget *label_updown;
        private GtkWidget *label_status;
        private GtkWidget *label_path;
        private GtkWidget *progressbar;
        private GtkWidget *label_size;
        private GtkWidget *label_rate;
        private GtkWidget *textview_log;
        private GtkWidget *statusbar;

	private GtkUIManager *ui_manager unrefwith g_object_unref;
	private GtkActionGroup *action_group;

	private void
	add_toolbar(self, GtkWidget *vbox) {
		GError *error = NULL;

        	selfp->handlebox_toolbar = gtk_handle_box_new();
        	gtk_box_pack_start(GTK_BOX(vbox), selfp->handlebox_toolbar, FALSE, FALSE, 0);
        
		if(!gtk_ui_manager_add_ui_from_string(selfp->ui_manager, embedtxt_loqui_transfer_window_ui, -1, &error))
			g_error("Failed to load UI XML: %s", error->message);

		gtk_ui_manager_ensure_update(selfp->ui_manager);
        	gtk_container_add(GTK_CONTAINER(selfp->handlebox_toolbar), gtk_ui_manager_get_widget(selfp->ui_manager, "/Toolbar"));
	}

	private void
	create_actions(self) {
		selfp->ui_manager = gtk_ui_manager_new();

		selfp->action_group = gtk_action_group_new("LoquiTransferWindw");
		gtk_ui_manager_set_add_tearoffs(selfp->ui_manager, TRUE);
		gtk_window_add_accel_group(GTK_WINDOW(self),
					   gtk_ui_manager_get_accel_group(selfp->ui_manager));
		
		
		gtk_action_group_add_actions(selfp->action_group,
					     action_entries,
					     G_N_ELEMENTS(action_entries),
					     self);
		gtk_action_group_add_toggle_actions(selfp->action_group,
						    toggle_action_entries,
						    G_N_ELEMENTS(toggle_action_entries),
						    self);

		gtk_ui_manager_insert_action_group(selfp->ui_manager, selfp->action_group, 0);
	}

        public GtkWidget *
        new(void) {
		Self *self;

        	GtkWidget *vbox1;
        	GtkWidget *vpaned1;
        	GtkWidget *hpaned1;
        	GtkWidget *scrolled_win;
        	GtkWidget *treeview;
        	GtkWidget *frame1;
        	GtkWidget *viewport1;
        	GtkWidget *table;
        	GtkWidget *label;
        	GtkWidget *button_dir;
        	GtkWidget *hseparator1;
        	GtkWidget *entry_filename;
        	GtkWidget *entry_directory;
        	GtkWidget *label_updown;
        	GtkWidget *label_status;
        	GtkWidget *label_path;
        	GtkWidget *progressbar;
        	GtkWidget *label_size;
        	GtkWidget *label_rate;
        	GtkWidget *textview_log;
        	GtkWidget *statusbar;
        
        	gint row;
		
		self = GET_NEW;
        
        	gtk_window_set_policy(GTK_WINDOW(self), TRUE, TRUE, TRUE);
        	gtk_window_set_title(GTK_WINDOW(self), _("Loqui - File Transfer Manager"));
        
        	vbox1 = gtk_vbox_new(FALSE, 0);
        	gtk_container_add(GTK_CONTAINER(self), vbox1);
		
		self_create_actions(self);
		self_add_toolbar(self, vbox1);

        	vpaned1 = gtk_vpaned_new();
        	gtk_box_pack_start(GTK_BOX(vbox1), vpaned1, TRUE, TRUE, 0);
        
        	hpaned1 = gtk_hpaned_new();
        	gtk_paned_pack1(GTK_PANED(vpaned1), hpaned1, FALSE, TRUE);
        
        	scrolled_win = gtk_scrolled_window_new(NULL, NULL);
        	gtk_paned_pack1(GTK_PANED(hpaned1), scrolled_win, FALSE, TRUE);
        	gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(scrolled_win),
        				       GTK_POLICY_AUTOMATIC,
        				       GTK_POLICY_AUTOMATIC);
        
        	treeview = gtk_tree_view_new();
        	gtk_container_add(GTK_CONTAINER(scrolled_win), treeview);
        
        	frame1 = gtk_frame_new(NULL);
        	gtk_frame_set_label(GTK_FRAME(frame1), _("Information"));
        	gtk_paned_pack2(GTK_PANED(hpaned1), frame1, TRUE, TRUE);
        
        
        	scrolled_win = gtk_scrolled_window_new(NULL, NULL);
        	gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(scrolled_win),
        				       GTK_POLICY_AUTOMATIC,
        				       GTK_POLICY_AUTOMATIC);
        	gtk_container_add(GTK_CONTAINER(frame1), scrolled_win);
        
        	viewport1 = gtk_viewport_new(NULL, NULL);
        	gtk_container_add(GTK_CONTAINER(scrolled_win), viewport1);
        
        	table = gtk_table_new(10, 3, FALSE);
        	gtk_container_add(GTK_CONTAINER(viewport1), table);
        	gtk_table_set_row_spacings(GTK_TABLE(table), 2);
        	gtk_table_set_col_spacings(GTK_TABLE(table), 2);
        
        	row = 0;
        
        	label = gtk_label_new(_("Filename:"));
        	gtk_table_attach(GTK_TABLE(table), label, 0, 1, row, row+1,
        			 (GtkAttachOptions) (GTK_FILL), (GtkAttachOptions) (0), 0, 0);
        
        	entry_filename = gtk_entry_new();
        	gtk_widget_show(entry_filename);
        	gtk_table_attach(GTK_TABLE(table), entry_filename, 1, 3, 0, 1,
        			 (GtkAttachOptions) (GTK_EXPAND | GTK_FILL), (GtkAttachOptions) (0), 0, 2);
        
        	row++;
        
        	label = gtk_label_new(_("Directory:"));
        	gtk_table_attach(GTK_TABLE(table), label, 0, 1, row, row+1,
        			 (GtkAttachOptions) (GTK_FILL), (GtkAttachOptions) (0), 0, 0);
        
        	entry_directory = gtk_entry_new();
        	gtk_widget_show(entry_directory);
        	gtk_table_attach(GTK_TABLE(table), entry_directory, 1, 2, row, row+1,
        			 (GtkAttachOptions) (GTK_EXPAND | GTK_FILL), (GtkAttachOptions) (0), 0, 2);
        
        	button_dir = gtk_button_new_with_mnemonic(_("Select..."));
        	gtk_table_attach(GTK_TABLE(table), button_dir, 2, 3, row, row+1,
        			 (GtkAttachOptions) (GTK_FILL), (GtkAttachOptions) (0), 0, 0);
        
        	row++;
        
        	hseparator1 = gtk_hseparator_new();
        	gtk_table_attach(GTK_TABLE(table), hseparator1, 0, 3, row, row+1,
        			 (GtkAttachOptions) (GTK_FILL), (GtkAttachOptions) (GTK_FILL), 0, 0);
        	gtk_widget_set_size_request(hseparator1, -1, 5);
        
        	row++;
        
        	label = gtk_label_new(_("Up / Down:"));
        	gtk_table_attach(GTK_TABLE(table), label, 0, 1, row, row+1,
        			 (GtkAttachOptions) (GTK_FILL), (GtkAttachOptions) (0), 0, 0);
        
        	label_updown = gtk_label_new(_("Down"));
        	gtk_table_attach(GTK_TABLE(table), label_updown, 1, 3, row, row+1,
        			 (GtkAttachOptions) (GTK_FILL), (GtkAttachOptions) (0), 0, 2);
        
        	row++;
        
        	label = gtk_label_new(_("Status:"));
        	gtk_table_attach(GTK_TABLE(table), label, 0, 1, row, row+1,
        			 (GtkAttachOptions) (GTK_FILL), (GtkAttachOptions) (0), 0, 0);
        
        	label_status = gtk_label_new(_("Transferring"));
        	gtk_table_attach(GTK_TABLE(table), label_status, 1, 3, row, row+1,
        			 (GtkAttachOptions) (GTK_FILL), (GtkAttachOptions) (0), 0, 2);
        
        	row++;
        
        	label = gtk_label_new(_("Path:"));
        	gtk_table_attach(GTK_TABLE(table), label, 0, 1, row, row+1,
        			 (GtkAttachOptions) (GTK_FILL), (GtkAttachOptions) (0), 0, 0);
        
        	label_path = gtk_label_new(_("hoge.jpg"));
        	gtk_table_attach(GTK_TABLE(table), label_path, 1, 3, row, row+1,
        			 (GtkAttachOptions) (GTK_FILL), (GtkAttachOptions) (0), 0, 2);
        
        	row++;
        
        	label = gtk_label_new(_("Progress:"));
        	gtk_table_attach(GTK_TABLE(table), label, 0, 1, row, row+1,
        			 (GtkAttachOptions) (GTK_FILL), (GtkAttachOptions) (0), 0, 0);
        
        	progressbar = gtk_progress_bar_new();
        	gtk_widget_show(progressbar);
        	gtk_table_attach(GTK_TABLE(table), progressbar, 1, 3, row, row+1,
        			 (GtkAttachOptions) (GTK_FILL), (GtkAttachOptions) (0), 0, 2);
        	gtk_progress_bar_set_fraction(GTK_PROGRESS_BAR(progressbar), 0.5);
        	gtk_progress_bar_set_text(GTK_PROGRESS_BAR(progressbar), _("50%"));
        
        	row++;
        
        	label = gtk_label_new(_("Size:"));
        	gtk_table_attach(GTK_TABLE(table), label, 0, 1, row, row+1,
        			 (GtkAttachOptions) (GTK_FILL), (GtkAttachOptions) (0), 0, 0);
        
        	label_size = gtk_label_new(_("10,243,000 / 50,222,222"));
        	gtk_widget_show(label_size);
        	gtk_table_attach(GTK_TABLE(table), label_size, 1, 3, row, row+1,
        			 (GtkAttachOptions) (GTK_FILL), (GtkAttachOptions) (0), 0, 2);
        	gtk_label_set_justify(GTK_LABEL(label_size), GTK_JUSTIFY_CENTER);
        
        	row++;
        
        	label = gtk_label_new(_("Rate:"));
        	gtk_table_attach(GTK_TABLE(table), label, 0, 1, row, row+1,
        			 (GtkAttachOptions) (GTK_FILL), (GtkAttachOptions) (0), 0, 0);
        
        	label_rate = gtk_label_new(_("50.2 KB/s"));
        	gtk_table_attach(GTK_TABLE(table), label_rate, 1, 3, row, row+1,
        			 (GtkAttachOptions) (GTK_FILL), (GtkAttachOptions) (0), 0, 2);
        	gtk_label_set_justify(GTK_LABEL(label_rate), GTK_JUSTIFY_CENTER);
        
        
        	scrolled_win = gtk_scrolled_window_new(NULL, NULL);
        	gtk_widget_show(scrolled_win);
        	gtk_paned_pack2(GTK_PANED(vpaned1), scrolled_win, TRUE, TRUE);
        	gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(scrolled_win), GTK_POLICY_NEVER, GTK_POLICY_AUTOMATIC);
        
        	textview_log = gtk_text_view_new();
        	gtk_container_add(GTK_CONTAINER(scrolled_win), textview_log);
        
        	statusbar = gtk_statusbar_new();
        	gtk_box_pack_start(GTK_BOX(vbox1), statusbar, FALSE, FALSE, 0);
        
        	selfp->treeview = treeview;
        	selfp->button_dir = button_dir;
        	selfp->entry_filename = entry_filename;
        	selfp->entry_directory = entry_directory;
        	selfp->label_updown = label_updown;
        	selfp->label_status = label_status;
        	selfp->label_path = label_path;
        	selfp->progressbar = progressbar;
        	selfp->label_size = label_size;
        	selfp->label_rate = label_rate;
        	selfp->textview_log = textview_log;
        	selfp->statusbar = statusbar;
        
        	gtk_widget_set_size_request(GTK_WIDGET(self), 600, 400);
        	gtk_widget_set_size_request(GTK_WIDGET(selfp->treeview), 300, 250);
        
                return GTK_WIDGET(self);
        }

}
