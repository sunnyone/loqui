requires 2.0.0
%alltop{
/*
 * Loqui -- Chat/IM client for Gtk2 <http://launchpad.net/loqui/>
 * Copyright (C) 2002-2003 Yoichi Imai <sunnyone41@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */
%}

%h{
#include <gtk/gtk.h>
#include <loqui_account.h>
#include <libloqui/loqui-account-manager.h>
%}

%{
/* #include "config.h" */

#include <glib/gi18n.h>
#include "gtkutils.h"

#include <libloqui/loqui-account-manager.h>
#include <libloqui/loqui-utils.h>
#include <loqui_profile_account.h>
#include <loqui_profile_account_irc.h>
#include <loqui_codeconv.h>

#include "loqui-protocol-selection-dialog.h"
#include <string.h>

enum {
	CODECONV_COLUMN_TITLE,
	CODECONV_COLUMN_NAME,
	CODECONV_COLUMN_NUMBER,
};
%}

class Loqui:Account:Dialog from Gtk:Dialog {
        private LoquiProfileAccount *profile;
        
	private GtkWidget *notebook;

        private GtkWidget *entry_name;
        private GtkWidget *check_use;
        
        private GtkWidget *entry_nick;
        private GtkWidget *entry_username;
        private GtkWidget *entry_password;
        private GtkWidget *entry_servername;
        private GtkWidget *spin_port;

	/* for IRC */
        private GtkWidget *entry_realname;
        private GtkWidget *entry_userinfo;
        private GtkWidget *entry_autojoin;
        private GtkWidget *entry_quit_message;

        private GtkWidget *radio_automatic;
        private GtkWidget *radio_noconv;
        private GtkWidget *radio_bytable;
        private GtkWidget *combobox_table;
        private GtkWidget *radio_codeset;
        private GtkWidget *entry_codeset;
        private GtkTreeModel *model_codeconv_table;
        
        private GtkWidget *textview_nicklist;

        private void
        set_codeconv_mode(self, LoquiCodeConvMode mode) {
        	switch (mode) {
        	case LOQUI_CODECONV_MODE_AUTOMATIC:
        		gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(selfp->radio_automatic), TRUE);
        		break;
        	case LOQUI_CODECONV_MODE_NO_CONV:
        		gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(selfp->radio_noconv), TRUE);
        		break;
        	case LOQUI_CODECONV_MODE_BY_TABLE:
        		gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(selfp->radio_bytable), TRUE);
        		break;
        	case LOQUI_CODECONV_MODE_CODESET:
        		gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(selfp->radio_codeset), TRUE);
        		break;
        	}
        }

        private LoquiCodeConvMode
        get_codeconv_mode(self) {
        	if (gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(selfp->radio_automatic)))
        		return LOQUI_CODECONV_MODE_AUTOMATIC;
        	if (gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(selfp->radio_noconv)))
        		return LOQUI_CODECONV_MODE_NO_CONV;
        	if (gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(selfp->radio_bytable)))
        		return LOQUI_CODECONV_MODE_BY_TABLE;
        	if (gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(selfp->radio_codeset)))
        		return LOQUI_CODECONV_MODE_CODESET;
        
        	return 0;
        }

        private void
        response_cb(GtkWidget *widget, gint response, gpointer data) {
		Self *self;

        	self = SELF(data);
        
        	switch(response) {
        	case GTK_RESPONSE_OK:
			self_save(self, selfp->profile);
        		break;
        	default:
        		break;
        	}
        }

        private void
        radio_toggled_cb(GtkWidget *radio, Loqui:Account:Dialog *self) {
        	self_update_codeconv_sensitivity(self);
        }

	private void
	save_irc(self, LoquiProfileAccountIRC *profile_irc) {
       		g_object_set(profile_irc,
			     "realname", gtk_entry_get_text(GTK_ENTRY(selfp->entry_realname)),
			     "userinfo", gtk_entry_get_text(GTK_ENTRY(selfp->entry_userinfo)),
			     "autojoin", gtk_entry_get_text(GTK_ENTRY(selfp->entry_autojoin)),
			     "quit_message", gtk_entry_get_text(GTK_ENTRY(selfp->entry_quit_message)),
			     NULL);
	}

	private void
	save_general(self, LoquiProfileAccount *profile) {
        	GList *nick_list;
        	GtkTreeIter iter;
        	const gchar *codeconv_item_name;

		if (gtk_combo_box_get_active_iter(GTK_COMBO_BOX(selfp->combobox_table), &iter))
			gtk_tree_model_get(selfp->model_codeconv_table, &iter, CODECONV_COLUMN_NAME, &codeconv_item_name, -1);
		else
			codeconv_item_name = NULL;

		g_object_set(profile,
			     "use", gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(selfp->check_use)),
			     "name", gtk_entry_get_text(GTK_ENTRY(selfp->entry_name)),
			     "nick", gtk_entry_get_text(GTK_ENTRY(selfp->entry_nick)),
			     "username", gtk_entry_get_text(GTK_ENTRY(selfp->entry_username)),
			     "password", gtk_entry_get_text(GTK_ENTRY(selfp->entry_password)),
			     "servername", gtk_entry_get_text(GTK_ENTRY(selfp->entry_servername)),
			     "port", (int) gtk_spin_button_get_value(GTK_SPIN_BUTTON(selfp->spin_port)),
			     "codeconv_mode", self_get_codeconv_mode(self),
			     "codeconv_item_name", codeconv_item_name,
			     "codeset", gtk_entry_get_text(GTK_ENTRY(selfp->entry_codeset)),
			     NULL);

		nick_list = NULL;
		gtkutils_set_string_list_from_textview(&nick_list, GTK_TEXT_VIEW(selfp->textview_nicklist));
		loqui_profile_account_set_nick_list(selfp->profile, nick_list);
	}

	private void
	save(self, LoquiProfileAccount *profile) {
		self_save_general(self, profile);
		
		if (LOQUI_IS_PROFILE_ACCOUNT_IRC(profile)) {
			self_save_irc(self, LOQUI_PROFILE_ACCOUNT_IRC(profile));
		}
	}

        private void
        update_codeconv_sensitivity(self) {
        	LoquiCodeConvMode mode;
        
        	mode = self_get_codeconv_mode(self);
        
        	gtk_widget_set_sensitive(selfp->entry_codeset, (mode == LOQUI_CODECONV_MODE_CODESET));
        	gtk_widget_set_sensitive(selfp->combobox_table, (mode == LOQUI_CODECONV_MODE_BY_TABLE));
        }

	private void
	load_general(self, LoquiProfileAccount *profile) {
        	const gchar *name;
        	LoquiCodeConvTableItem *table;
        	gint i;
        	GtkTreeIter iter;

		gtk_entry_set_text(GTK_ENTRY(selfp->entry_name),
				   LOQUI_UTILS_EMPTY_IF_NULL(loqui_profile_account_get_name(profile)));
        	gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(selfp->check_use),
					     loqui_profile_account_get_use(profile));

                gtk_entry_set_text(GTK_ENTRY(selfp->entry_nick),
                                   LOQUI_UTILS_EMPTY_IF_NULL(loqui_profile_account_get_nick(profile)));
                gtk_entry_set_text(GTK_ENTRY(selfp->entry_username),
                                   LOQUI_UTILS_EMPTY_IF_NULL(loqui_profile_account_get_username(profile)));
                gtk_entry_set_text(GTK_ENTRY(selfp->entry_password),
                                   LOQUI_UTILS_EMPTY_IF_NULL(loqui_profile_account_get_password(profile)));
                gtk_entry_set_text(GTK_ENTRY(selfp->entry_servername),
                                   LOQUI_UTILS_EMPTY_IF_NULL(loqui_profile_account_get_servername(profile)));
                gtk_spin_button_set_value(GTK_SPIN_BUTTON(selfp->spin_port),
                                          loqui_profile_account_get_port(profile));

		table = loqui_protocol_get_codeconv_table(loqui_profile_account_get_protocol(profile));
        	name = loqui_profile_account_get_codeconv_item_name(profile);

		gtk_list_store_clear(GTK_LIST_STORE(selfp->model_codeconv_table));
        	for (i = 0; table[i].name != NULL; i++) {
        		gtk_list_store_append(GTK_LIST_STORE(selfp->model_codeconv_table), &iter);
        		gtk_list_store_set(GTK_LIST_STORE(selfp->model_codeconv_table),
        				   &iter,
        				   CODECONV_COLUMN_TITLE, loqui_codeconv_translate(table[i].title),
        				   CODECONV_COLUMN_NAME, table[i].name,
        				   -1);
        
        		if (name != NULL && strcmp(table[i].name, name) == 0) {
        			gtk_combo_box_set_active_iter(GTK_COMBO_BOX(selfp->combobox_table), &iter);
        		}
        	}

        	self_set_codeconv_mode(self, loqui_profile_account_get_codeconv_mode(LOQUI_PROFILE_ACCOUNT(profile)));
        	self_update_codeconv_sensitivity(self);

		gtk_entry_set_text(GTK_ENTRY(selfp->entry_codeset),
				   LOQUI_UTILS_EMPTY_IF_NULL(loqui_profile_account_get_codeset(LOQUI_PROFILE_ACCOUNT(profile))));

        	gtkutils_set_textview_from_string_list(GTK_TEXT_VIEW(selfp->textview_nicklist),
        					       loqui_profile_account_get_nick_list(profile));
	}

	private void
	load_irc(self, LoquiProfileAccountIRC *profile_irc) {
        	gtk_entry_set_text(GTK_ENTRY(selfp->entry_realname),
				   LOQUI_UTILS_EMPTY_IF_NULL(loqui_profile_account_irc_get_realname(profile_irc)));
        	gtk_entry_set_text(GTK_ENTRY(selfp->entry_userinfo),
				   LOQUI_UTILS_EMPTY_IF_NULL(loqui_profile_account_irc_get_userinfo(profile_irc)));
        	gtk_entry_set_text(GTK_ENTRY(selfp->entry_autojoin),
				   LOQUI_UTILS_EMPTY_IF_NULL(loqui_profile_account_irc_get_autojoin(profile_irc)));
        	gtk_entry_set_text(GTK_ENTRY(selfp->entry_quit_message),
				   LOQUI_UTILS_EMPTY_IF_NULL(loqui_profile_account_irc_get_quit_message(profile_irc)));
	}

	private void
	load(self, LoquiProfileAccount *profile) {
		self_load_general(self, profile);

		if (LOQUI_IS_PROFILE_ACCOUNT_IRC(profile)) {
			self_load_irc(self, LOQUI_PROFILE_ACCOUNT_IRC(profile));
		}
	}

	private void
	append_profile_page(self) {
        	GtkWidget *hbox, *vbox_c;
		GtkWidget *vbox;
        	GtkWidget *frame;

        	vbox = gtk_vbox_new(FALSE, 0);

        	gtk_notebook_append_page(GTK_NOTEBOOK(selfp->notebook), vbox, gtk_label_new(_("Profile")));
        	
        	hbox = gtk_hbox_new(TRUE, 0);
        	gtk_box_pack_start(GTK_BOX(vbox), hbox, FALSE, TRUE, 0);
        	
        	gtkutils_add_label_entry(hbox, _("Account name:"), &selfp->entry_name, NULL);
        	
        	selfp->check_use = gtk_check_button_new_with_label(_("Connect by default"));
        	gtk_box_pack_start(GTK_BOX(hbox), selfp->check_use, TRUE, TRUE, 0);
        
		/* User */
        	frame = gtk_frame_new(_("User"));
        	gtk_box_pack_start(GTK_BOX(vbox), frame, TRUE, TRUE, 0);
        	
        	vbox_c = gtk_vbox_new(TRUE, 0);
        	gtk_container_add(GTK_CONTAINER(frame), vbox_c);
        	
        	gtkutils_add_label_entry(vbox_c, _("Nickname:"), &selfp->entry_nick, NULL);
        	gtkutils_add_label_entry(vbox_c, _("User name:"), &selfp->entry_username, NULL);
        	gtkutils_add_label_entry(vbox_c, _("Password:"), &selfp->entry_password, NULL);
        	gtk_entry_set_visibility(GTK_ENTRY(selfp->entry_password), FALSE);
        		
		/* Server */
        	frame = gtk_frame_new(_("Server"));
        	gtk_box_pack_start(GTK_BOX(vbox), frame, TRUE, TRUE, 0);
        	
        	vbox_c = gtk_vbox_new(TRUE, 0);
        	gtk_container_add(GTK_CONTAINER(frame), vbox_c);
        	
        	gtkutils_add_label_entry(vbox_c, _("Hostname:"), &selfp->entry_servername, NULL);
        	gtkutils_add_label_spin_button(vbox_c, _("Port:"), &selfp->spin_port, 1, 65535, 1);
		
		/* IRC */
        	frame = gtk_frame_new(_("IRC"));
        	gtk_box_pack_start(GTK_BOX(vbox), frame, TRUE, TRUE, 0);
		
        	vbox_c = gtk_vbox_new(TRUE, 0);
        	gtk_container_add(GTK_CONTAINER(frame), vbox_c);
		
        	gtkutils_add_label_entry(vbox_c, _("Realname:"), &selfp->entry_realname, NULL);
        	gtkutils_add_label_entry(vbox_c, _("User information:"), &selfp->entry_userinfo, NULL);
        	gtkutils_add_label_entry(vbox_c, _("Auto join channels (ex. #a,#b,#c keyA,keyB):"), &selfp->entry_autojoin, NULL);
        	gtkutils_add_label_entry(vbox_c, _("Quit message:"), &selfp->entry_quit_message, NULL);
	}

	private void
	append_code_page(self) {
		GtkWidget *vbox;
        	GtkCellRenderer *cell;
        	GtkWidget *frame;
                GSList *group_codeconv = NULL;
        	GtkWidget *vbox1;
        	GtkWidget *hbox1;
        	GtkWidget *label;

        	vbox = gtk_vbox_new(FALSE, 0);
        	gtk_notebook_append_page(GTK_NOTEBOOK(selfp->notebook), vbox, gtk_label_new(_("Code")));
        
        	frame = gtk_frame_new(_("Code convertion"));
        	gtk_box_pack_start(GTK_BOX(vbox), frame, FALSE, FALSE, 2);
        	
                vbox1 = gtk_vbox_new(FALSE, 0);
                gtk_container_add(GTK_CONTAINER(frame), vbox1);
        
                selfp->radio_automatic = gtk_radio_button_new_with_mnemonic(NULL, _("Automatic detection by locale"));
                gtk_box_pack_start(GTK_BOX(vbox1), selfp->radio_automatic, FALSE, FALSE, 0);
                group_codeconv = gtk_radio_button_get_group(GTK_RADIO_BUTTON(selfp->radio_automatic));
        	g_signal_connect(G_OBJECT(selfp->radio_automatic), "toggled",
        			 G_CALLBACK(self_radio_toggled_cb), self);
        
                selfp->radio_noconv = gtk_radio_button_new_with_mnemonic(NULL, _("No convertion"));
                gtk_box_pack_start(GTK_BOX(vbox1), selfp->radio_noconv, FALSE, FALSE, 0);
                gtk_radio_button_set_group(GTK_RADIO_BUTTON(selfp->radio_noconv), group_codeconv);
                group_codeconv = gtk_radio_button_get_group(GTK_RADIO_BUTTON(selfp->radio_noconv));
        	g_signal_connect(G_OBJECT(selfp->radio_noconv), "toggled",
        			 G_CALLBACK(self_radio_toggled_cb), self);
        
                selfp->radio_bytable = gtk_radio_button_new_with_mnemonic(NULL, _("Select from the table"));
                gtk_box_pack_start(GTK_BOX(vbox1), selfp->radio_bytable, FALSE, FALSE, 0);
                gtk_radio_button_set_group(GTK_RADIO_BUTTON(selfp->radio_bytable), group_codeconv);
                group_codeconv = gtk_radio_button_get_group(GTK_RADIO_BUTTON(selfp->radio_bytable));
        	g_signal_connect(G_OBJECT(selfp->radio_bytable), "toggled",
        			 G_CALLBACK(self_radio_toggled_cb), self);
        
        	selfp->model_codeconv_table = GTK_TREE_MODEL(gtk_list_store_new(CODECONV_COLUMN_NUMBER,
        								       G_TYPE_STRING,
        								       G_TYPE_STRING));
        	
                selfp->combobox_table = gtk_combo_box_new_with_model(selfp->model_codeconv_table);
                gtk_box_pack_start(GTK_BOX(vbox1), selfp->combobox_table, FALSE, FALSE, 0);
        
        	cell = gtk_cell_renderer_text_new();
        	gtk_cell_layout_pack_start(GTK_CELL_LAYOUT(selfp->combobox_table), cell, TRUE);
        	gtk_cell_layout_set_attributes(GTK_CELL_LAYOUT(selfp->combobox_table), cell,
        				       "text", 0,
        				       NULL);
        
                selfp->radio_codeset = gtk_radio_button_new_with_mnemonic(NULL, _("Specify codeset"));
                gtk_box_pack_start(GTK_BOX(vbox1), selfp->radio_codeset, FALSE, FALSE, 0);
                gtk_radio_button_set_group(GTK_RADIO_BUTTON(selfp->radio_codeset), group_codeconv);
                group_codeconv = gtk_radio_button_get_group(GTK_RADIO_BUTTON(selfp->radio_codeset));
        	g_signal_connect(G_OBJECT(selfp->radio_codeset), "toggled",
        			 G_CALLBACK(self_radio_toggled_cb), self);
        
                hbox1 = gtk_hbox_new(FALSE, 0);
                gtk_box_pack_start(GTK_BOX(vbox1), hbox1, FALSE, FALSE, 0);
        
                label = gtk_label_new(_("Codeset: "));
                gtk_box_pack_start(GTK_BOX(hbox1), label, FALSE, FALSE, 0);
        
                selfp->entry_codeset = gtk_entry_new();
                gtk_box_pack_start(GTK_BOX(hbox1), selfp->entry_codeset, TRUE, TRUE, 0);
	}
	private void
	append_nick_page(self) {
		GtkWidget *vbox;
        	GtkWidget *frame;

        	vbox = gtk_vbox_new(FALSE, 0);
        	gtk_notebook_append_page(GTK_NOTEBOOK(selfp->notebook), vbox, gtk_label_new(_("Nick")));
        
        	frame = gtkutils_create_framed_textview(&selfp->textview_nicklist,
        						_("List of often used nick(Separate each words with linefeeds)"));
        
        	gtk_box_pack_start(GTK_BOX(vbox), frame, TRUE, TRUE, 0);
        }

        public GtkWidget*
        new(LoquiProfileAccount *profile) {
		GtkWidget *vbox;
		Self *self;
       
		self = GET_NEW;
        	
        	selfp->profile = profile;
        
        	gtk_dialog_add_buttons(GTK_DIALOG(self),
        			       GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,
        			       GTK_STOCK_OK, GTK_RESPONSE_OK,
        			       NULL);
        
        	g_signal_connect(G_OBJECT(self),
        			 "response",
        			 G_CALLBACK(loqui_account_dialog_response_cb),
        			 self);
        
        	vbox = gtk_dialog_get_content_area(GTK_DIALOG(self));
        	
        	selfp->notebook = gtk_notebook_new();
        	gtk_box_pack_start(GTK_BOX(vbox), selfp->notebook, TRUE, TRUE, 0);
        
		self_append_profile_page(self);

		self_append_code_page(self);
		self_append_nick_page(self);

		self_load(self, profile);

        	gtk_widget_show_all(GTK_WIDGET(self));
        
        	return GTK_WIDGET(self);
        }

        public void
        open_add_dialog(GtkWindow *parent, LoquiAccountManager *manager) {
        	LoquiAccountDialog *dialog;
        	LoquiProfileAccount *profile;
        	LoquiAccount *account;
        	gint response;
		LoquiProtocol *protocol;

		/* TODO: show LoquiProtocolSelectionDialog again when another protocol is implemented. */
		protocol = loqui_protocol_manager_get_protocol(manager->protocol_manager, "IRC");

		profile = loqui_protocol_create_profile_account(protocol);
        	dialog = SELF(self_new(profile));
        	gtk_window_set_transient_for(GTK_WINDOW(dialog), parent);
        	response = gtk_dialog_run(GTK_DIALOG(dialog));
        	gtk_widget_destroy(GTK_WIDGET(dialog));
        
        	if (response == GTK_RESPONSE_OK) {
			account = loqui_protocol_create_account(protocol, profile);
        		loqui_account_manager_add_account(manager, account);
        		g_object_unref(account);
			
        		loqui_account_manager_save_accounts(manager);
        	}

		g_object_unref(profile);
        }

        public void
        open_configure_dialog(GtkWindow *parent, LoquiAccountManager *manager, LoquiAccount *account) {
        	GtkWidget *dialog;
        	
        	dialog = self_new(loqui_account_get_profile(account));
        	gtk_window_set_transient_for(GTK_WINDOW(dialog), parent);
        	gtk_dialog_run(GTK_DIALOG(dialog));
        	gtk_widget_destroy(dialog);
        
        	/* FIXME: should do
        	   account_manager_update_account(manager, account); */
        	loqui_account_manager_save_accounts(manager);
        }

        public void
        open_remove_dialog(GtkWindow *parent, LoquiAccountManager *manager, LoquiAccount *account) {
        	GtkWidget *dialog;
        	gint response;
        
        	dialog = gtk_message_dialog_new(parent,
        					GTK_DIALOG_DESTROY_WITH_PARENT,
        					GTK_MESSAGE_WARNING,
        					GTK_BUTTONS_YES_NO,
        					_("This account's configuration and connection will be removed.\n"
        					  "Do you really want to remove this account?"));
        	response = gtk_dialog_run(GTK_DIALOG(dialog));
        	gtk_widget_destroy(dialog);
        
        	if (response == GTK_RESPONSE_YES) {
        		loqui_account_manager_remove_account(manager, account);
        		loqui_account_manager_save_accounts(manager);
        		loqui_debug_puts("Removed account.");
        	}
        }

}
